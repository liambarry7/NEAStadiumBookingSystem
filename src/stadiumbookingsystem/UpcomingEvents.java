/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stadiumbookingsystem;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import library.databaseSQL;
import java.util.*;
import library.sortsAndSearches;
import objects.*;


/**
 *
 * @author lb200992
 */
public class UpcomingEvents extends javax.swing.JFrame {

    /**
     * Creates new form UpcomingEvents
     */
    public UpcomingEvents() {
        initComponents();

        
        //displays events in A-Z order as defult
        sortAZ();
       

        }
    

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        SortDropDown = new javax.swing.JComboBox<>();
        ApplyButton = new javax.swing.JButton();
        NameOne = new javax.swing.JLabel();
        MoreInformationOne = new javax.swing.JButton();
        BuyTicketsOne = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TicketNumberOne = new javax.swing.JLabel();
        DateOne = new javax.swing.JLabel();
        NameTwo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TicketNumberTwo = new javax.swing.JLabel();
        DateTwo = new javax.swing.JLabel();
        MoreInformationTwo = new javax.swing.JButton();
        BuyTicketsTwo = new javax.swing.JButton();
        NameThree = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TicketNumberThree = new javax.swing.JLabel();
        DateThree = new javax.swing.JLabel();
        MoreInformationThree = new javax.swing.JButton();
        BuyTicketsThree = new javax.swing.JButton();
        NameFive = new javax.swing.JLabel();
        NameFour = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        TicketNumberFour = new javax.swing.JLabel();
        TicketNumberFive = new javax.swing.JLabel();
        DateFour = new javax.swing.JLabel();
        DateFive = new javax.swing.JLabel();
        MoreInformationFour = new javax.swing.JButton();
        MoreInformationFive = new javax.swing.JButton();
        BuyTicketsFour = new javax.swing.JButton();
        BuyTicketsFive = new javax.swing.JButton();
        TimeOne = new javax.swing.JLabel();
        TimeTwo = new javax.swing.JLabel();
        TimeThree = new javax.swing.JLabel();
        TimeFour = new javax.swing.JLabel();
        TimeFive = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Upcoming Events");

        BackButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        SortDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A - Z", "Z - A", "Soonest", "Furthest" }));

        ApplyButton.setText("Apply");
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        NameOne.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NameOne.setText("NAME");

        MoreInformationOne.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MoreInformationOne.setText("More Information");
        MoreInformationOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreInformationOneActionPerformed(evt);
            }
        });

        BuyTicketsOne.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        BuyTicketsOne.setText("Buy Tickets");
        BuyTicketsOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyTicketsOneActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Tickets Available: ");

        TicketNumberOne.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TicketNumberOne.setText("400");

        DateOne.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DateOne.setText("DATE");

        NameTwo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NameTwo.setText("NAME");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Tickets Available: ");

        TicketNumberTwo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TicketNumberTwo.setText("400");

        DateTwo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DateTwo.setText("DATE");

        MoreInformationTwo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MoreInformationTwo.setText("More Information");
        MoreInformationTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreInformationTwoActionPerformed(evt);
            }
        });

        BuyTicketsTwo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        BuyTicketsTwo.setText("Buy Tickets");
        BuyTicketsTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyTicketsTwoActionPerformed(evt);
            }
        });

        NameThree.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NameThree.setText("NAME");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Tickets Available: ");

        TicketNumberThree.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TicketNumberThree.setText("400");

        DateThree.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DateThree.setText("DATE");

        MoreInformationThree.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MoreInformationThree.setText("More Information");
        MoreInformationThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreInformationThreeActionPerformed(evt);
            }
        });

        BuyTicketsThree.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        BuyTicketsThree.setText("Buy Tickets");
        BuyTicketsThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyTicketsThreeActionPerformed(evt);
            }
        });

        NameFive.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NameFive.setText("NAME");

        NameFour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NameFour.setText("NAME");

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Tickets Available: ");

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Tickets Available: ");

        TicketNumberFour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TicketNumberFour.setText("400");

        TicketNumberFive.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TicketNumberFive.setText("400");

        DateFour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DateFour.setText("DATE");

        DateFive.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DateFive.setText("DATE");

        MoreInformationFour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MoreInformationFour.setText("More Information");
        MoreInformationFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreInformationFourActionPerformed(evt);
            }
        });

        MoreInformationFive.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MoreInformationFive.setText("More Information");
        MoreInformationFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreInformationFiveActionPerformed(evt);
            }
        });

        BuyTicketsFour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        BuyTicketsFour.setText("Buy Tickets");
        BuyTicketsFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyTicketsFourActionPerformed(evt);
            }
        });

        BuyTicketsFive.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        BuyTicketsFive.setText("Buy Tickets");
        BuyTicketsFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyTicketsFiveActionPerformed(evt);
            }
        });

        TimeOne.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TimeOne.setText("jLabel3");

        TimeTwo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TimeTwo.setText("jLabel3");

        TimeThree.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TimeThree.setText("jLabel3");

        TimeFour.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TimeFour.setText("jLabel3");

        TimeFive.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TimeFive.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NameTwo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NameOne, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(NameThree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NameFive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NameFour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TicketNumberOne)
                            .addComponent(TicketNumberTwo)
                            .addComponent(TicketNumberThree)
                            .addComponent(TicketNumberFour)
                            .addComponent(TicketNumberFive))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeTwo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DateThree, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeThree))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DateFour, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeFour))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DateFive, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeFive))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DateOne, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeOne)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MoreInformationOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BuyTicketsOne, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MoreInformationTwo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BuyTicketsTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MoreInformationFour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BuyTicketsFour, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MoreInformationFive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BuyTicketsFive, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MoreInformationThree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BuyTicketsThree, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SortDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(ApplyButton)
                        .addGap(328, 328, 328))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(744, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ApplyButton)
                    .addComponent(SortDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameOne, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(TicketNumberOne)
                    .addComponent(DateOne)
                    .addComponent(MoreInformationOne, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuyTicketsOne, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeOne))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(TicketNumberTwo)
                    .addComponent(DateTwo)
                    .addComponent(MoreInformationTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuyTicketsTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeTwo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameThree, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(TicketNumberThree)
                    .addComponent(DateThree)
                    .addComponent(MoreInformationThree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuyTicketsThree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeThree))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameFour, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(TicketNumberFour)
                    .addComponent(DateFour)
                    .addComponent(BuyTicketsFour, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoreInformationFour, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeFour))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameFive, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(TicketNumberFive)
                    .addComponent(DateFive)
                    .addComponent(MoreInformationFive, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuyTicketsFive, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeFive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        MainMenu mm = new MainMenu();
        mm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    public void sortAZ() {
        //gets all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();
        System.out.println("Events before sort:");
        for (int i = 0; i < eventsList.size(); i++) {
            System.out.println(eventsList.get(i));            
        }
        System.out.println("");
        
        //create arraylist for eventnames to be used for comparing later
        ArrayList<String> eventNames = new ArrayList<>();          
        
        //getting event names from each event object stored in the eventsList
        for (int i = 0; i < eventsList.size(); i++) {
            eventNames.add(eventsList.get(i).getEventName());
        }
        

        
        //make array from array list to be used for sorting:
        String[] sortedEventNames = eventNames.toArray(new String[0]);

        //sort array list into alphabetical order (A-Z) using a merge sort
        library.sortsAndSearches.stringMergeSort(sortedEventNames);
        
        ArrayList<event> eventsAZ = new ArrayList<>(); //sorted object list of events in A-Z order        
     
        //searches through eventsList until the names match, then adds the matching event object into the A-Z arrayList
        for (int i = 0; i < sortedEventNames.length; i++) {            
            for (int j = 0; j < sortedEventNames.length; j++) {                
                if (sortedEventNames[i].equals(eventsList.get(j).getEventName()) ) {
                    eventsAZ.add(eventsList.get(j));
                }
            }
        }
        
        System.out.println("Events after merge sort:");
        for (int i = 0; i < eventsAZ.size(); i++) {
            System.out.println(eventsAZ.get(i));            
        }
        
        //Assigning gui elements to object details
        NameOne.setText(eventsAZ.get(0).getEventName());
        String ticketCap1 = Integer.toString(eventsAZ.get(0).getRemainingTickets());
        TicketNumberOne.setText(ticketCap1);
        DateOne.setText(eventsAZ.get(0).getEventDate());
        TimeOne.setText(eventsAZ.get(0).getEventTime());
        
        NameTwo.setText(eventsAZ.get(1).getEventName());
        String ticketCap2 = Integer.toString(eventsAZ.get(1).getRemainingTickets());
        TicketNumberTwo.setText(ticketCap2);
        DateTwo.setText(eventsAZ.get(1).getEventDate());
        TimeTwo.setText(eventsAZ.get(1).getEventTime());
        
        NameThree.setText(eventsAZ.get(2).getEventName());
        String ticketCap3 = Integer.toString(eventsAZ.get(2).getRemainingTickets());
        TicketNumberThree.setText(ticketCap3);
        DateThree.setText(eventsAZ.get(2).getEventDate());
        TimeThree.setText(eventsAZ.get(2).getEventTime());
        
        NameFour.setText(eventsAZ.get(3).getEventName());
        String ticketCap4 = Integer.toString(eventsAZ.get(3).getRemainingTickets());
        TicketNumberFour.setText(ticketCap4);
        DateFour.setText(eventsAZ.get(3).getEventDate());
        TimeFour.setText(eventsAZ.get(3).getEventTime());
        
        NameFive.setText(eventsAZ.get(4).getEventName());
        String ticketCap5 = Integer.toString(eventsAZ.get(4).getRemainingTickets());
        TicketNumberFive.setText(ticketCap5);
        DateFive.setText(eventsAZ.get(4).getEventDate());
        TimeFive.setText(eventsAZ.get(4).getEventTime());
        
        buyButtonController();
        
    }
    
    public void sortZA() {
        //get all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();
        System.out.println("Events before sort:");
        for (int i = 0; i < eventsList.size(); i++) {
            System.out.println(eventsList.get(i));            
        }
        System.out.println("");
        //create arraylist for eventnames to be used for comparing later
        ArrayList<String> eventNames = new ArrayList<>();
        
        //getting event names from each event object stored in the eventsList
        for (int i = 0; i < eventsList.size(); i++) {
            eventNames.add(eventsList.get(i).getEventName());            
        }
        
        //make an array from eventNames to be used in merge sort
        String[] sortedEventNames = eventNames.toArray(new String[0]);
        
        //sort array into alphabetical order using merge sort
        library.sortsAndSearches.stringMergeSort(sortedEventNames);
        
        //reverse array using a stack to get Z-A ordered eventName list
        library.sortsAndSearches.stringReverseArray(sortedEventNames);
//        System.out.println(Arrays.toString(sortedEventNames));

        //search through eventsList until the event names match, then add the matching event object into the Z-A ArrayList
        ArrayList<event> eventsZA = new ArrayList<>();
        
        for (int i = 0; i < sortedEventNames.length; i++) {
            for (int j = 0; j < sortedEventNames.length; j++) {
                if (sortedEventNames[i].equals(eventsList.get(j).getEventName())) {
                    eventsZA.add(eventsList.get(j));
                }                
            } 
        }
        
        System.out.println("Events after merge sort:");
        for (int i = 0; i < eventsZA.size(); i++) {
            System.out.println(eventsZA.get(i));            
        }

        //Assigning gui elements to object details
        NameOne.setText(eventsZA.get(0).getEventName());
        String ticketCap1 = Integer.toString(eventsZA.get(0).getRemainingTickets());
        TicketNumberOne.setText(ticketCap1);
        DateOne.setText(eventsZA.get(0).getEventDate());
        TimeOne.setText(eventsZA.get(0).getEventTime());
        
        NameTwo.setText(eventsZA.get(1).getEventName());
        String ticketCap2 = Integer.toString(eventsZA.get(1).getRemainingTickets());
        TicketNumberTwo.setText(ticketCap2);
        DateTwo.setText(eventsZA.get(1).getEventDate());
        TimeTwo.setText(eventsZA.get(1).getEventTime());
        
        NameThree.setText(eventsZA.get(2).getEventName());
        String ticketCap3 = Integer.toString(eventsZA.get(2).getRemainingTickets());
        TicketNumberThree.setText(ticketCap3);
        DateThree.setText(eventsZA.get(2).getEventDate());
        TimeThree.setText(eventsZA.get(3).getEventTime());
        
        NameFour.setText(eventsZA.get(3).getEventName());
        String ticketCap4 = Integer.toString(eventsZA.get(3).getRemainingTickets());
        TicketNumberFour.setText(ticketCap4);
        DateFour.setText(eventsZA.get(3).getEventDate());
        TimeFour.setText(eventsZA.get(4).getEventTime());
        
        NameFive.setText(eventsZA.get(4).getEventName());
        String ticketCap5 = Integer.toString(eventsZA.get(4).getRemainingTickets());
        TicketNumberFive.setText(ticketCap5);
        DateFive.setText(eventsZA.get(4).getEventDate());
        TimeFive.setText(eventsZA.get(4).getEventTime());
        
        buyButtonController();
        
    }
    
    public void buyButtonController() {
        try {
            //get membership status of user
            String membershipStatus = databaseSQL.getCurrentUser().getMembership();
            
            //getting current date, formatting it and turning it into a string
            SimpleDateFormat formatter1 = new SimpleDateFormat("dd/MM/yyyy");
            Date date = new Date(); //gets current date
            String currentDate = formatter1.format(date);
            //converts string date into Date object
            Date formattedCurrentDate = new SimpleDateFormat("dd/MM/yyyy").parse(currentDate);
            
            System.out.println("\nTodays date: " + formattedCurrentDate);
            
            //setting buy tickets buttons to true or false depending on whether the date is within a certain time frame
            dateRow1(membershipStatus, formattedCurrentDate);
            dateRow2(membershipStatus, formattedCurrentDate);
            dateRow3(membershipStatus, formattedCurrentDate);
            dateRow4(membershipStatus, formattedCurrentDate);
            dateRow5(membershipStatus, formattedCurrentDate);
        } catch (Exception e) {
            System.out.println("Error in a: " + e);
        }
    }
    
// <editor-fold defaultstate="collapsed" desc="Date checker">
    
    public void dateRow1(String membership, Date currentDate) {
        try {

            //get date of row one, compare dates
            String eventDate = DateOne.getText();
            Date formattedEventDate = new SimpleDateFormat("dd/MM/yyyy").parse(eventDate);

            //calucalte the time difference between the two dates
            long timeDiff = formattedEventDate.getTime() - currentDate.getTime();
            long numberOfDays = (timeDiff / (1000 * 60 * 60 * 24)) % 365;
//            System.out.println(numberOfDays);

            if (membership.equals("not a member")) {
                if (numberOfDays > 30) {
//                    System.out.println("Cannot buy tickets as event over one month away");
                    BuyTicketsOne.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under 30 days");
                    BuyTicketsOne.setEnabled(true); //set button to enables so that user can buy tickets
                }
            } else if (membership.equals("member")) {
                if (numberOfDays > 37) {
//                    System.out.println("Cannot buy tickets as event over one month and a week away");
                    BuyTicketsOne.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under a month and one week away");
                    BuyTicketsOne.setEnabled(true); //set button to enables so that user can buy tickets
                }
            }

        } catch (Exception e) {
            System.out.println("Error with row one date: " + e);
        }
    }
    
        public void dateRow2(String membership, Date currentDate) {
        try {

            //get date of row one, compare dates
            String eventDate = DateTwo.getText();
            Date formattedEventDate = new SimpleDateFormat("dd/MM/yyyy").parse(eventDate);

            //calucalte the time difference between the two dates
            long timeDiff = formattedEventDate.getTime() - currentDate.getTime();
            long numberOfDays = (timeDiff / (1000 * 60 * 60 * 24)) % 365;
//            System.out.println(numberOfDays);

            if (membership.equals("not a member")) {
                if (numberOfDays > 30) {
//                    System.out.println("Cannot buy tickets as event over one month away");
                    BuyTicketsTwo.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under 30 days");
                    BuyTicketsTwo.setEnabled(true); //set button to enables so that user can buy tickets
                }
            } else if (membership.equals("member")) {
                if (numberOfDays > 37) {
//                    System.out.println("Cannot buy tickets as event over one month and a week away");
                    BuyTicketsTwo.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under a month and one week away");
                    BuyTicketsTwo.setEnabled(true); //set button to enables so that user can buy tickets
                }
            }

        } catch (Exception e) {
            System.out.println("Error with row two date: " + e);
        }
    }

    public void dateRow3(String membership, Date currentDate) {
        try {

            //get date of row one, compare dates
            String eventDate = DateThree.getText();
            Date formattedEventDate = new SimpleDateFormat("dd/MM/yyyy").parse(eventDate);

            //calucalte the time difference between the two dates
            long timeDiff = formattedEventDate.getTime() - currentDate.getTime();
            long numberOfDays = (timeDiff / (1000 * 60 * 60 * 24)) % 365;
//            System.out.println(numberOfDays);

            if (membership.equals("not a member")) {
                if (numberOfDays > 30) {
//                    System.out.println("Cannot buy tickets as event over one month away");
                    BuyTicketsThree.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under 30 days");
                    BuyTicketsThree.setEnabled(true); //set button to enables so that user can buy tickets
                }
            } else if (membership.equals("member")) {
                if (numberOfDays > 37) {
//                    System.out.println("Cannot buy tickets as event over one month and a week away");
                    BuyTicketsThree.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under a month and one week away");
                    BuyTicketsThree.setEnabled(true); //set button to enables so that user can buy tickets
                }
            }

        } catch (Exception e) {
            System.out.println("Error with row three date: " + e);
        }
    }

    public void dateRow4(String membership, Date currentDate) {
        try {

            //get date of row one, compare dates
            String eventDate = DateFour.getText();
            Date formattedEventDate = new SimpleDateFormat("dd/MM/yyyy").parse(eventDate);

            //calucalte the time difference between the two dates
            long timeDiff = formattedEventDate.getTime() - currentDate.getTime();
            long numberOfDays = (timeDiff / (1000 * 60 * 60 * 24)) % 365;
//            System.out.println(numberOfDays);

            if (membership.equals("not a member")) {
                if (numberOfDays > 30) {
//                    System.out.println("Cannot buy tickets as event over one month away");
                    BuyTicketsFour.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under 30 days");
                    BuyTicketsFour.setEnabled(true); //set button to enables so that user can buy tickets
                }
            } else if (membership.equals("member")) {
                if (numberOfDays > 37) {
//                    System.out.println("Cannot buy tickets as event over one month and a week away");
                    BuyTicketsFour.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under a month and one week away");
                    BuyTicketsFour.setEnabled(true); //set button to enables so that user can buy tickets
                }
            }           
            
        } catch (Exception e) {
            System.out.println("Error with row four date: " + e);
        }
    }
    
        public void dateRow5(String membership, Date currentDate) {
        try {
            
            //get date of row one, compare dates
            String eventDate = DateFive.getText();
            Date formattedEventDate = new SimpleDateFormat("dd/MM/yyyy").parse(eventDate);
            
            //calucalte the time difference between the two dates
            long timeDiff = formattedEventDate.getTime() - currentDate.getTime();
            long numberOfDays = (timeDiff / (1000 * 60 * 60 * 24)) % 365;
//            System.out.println(numberOfDays);

            if (membership.equals("not a member")) {
                if (numberOfDays > 30) {
//                    System.out.println("Cannot buy tickets as event over one month away");
                    BuyTicketsFive.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under 30 days");
                    BuyTicketsFive.setEnabled(true); //set button to enables so that user can buy tickets
                }
            } else if (membership.equals("member")) {
                if (numberOfDays > 37) {
//                    System.out.println("Cannot buy tickets as event over one month and a week away");
                    BuyTicketsFive.setEnabled(false); //set button to disabled so that user cannot buy any tickets
                } else {
//                    System.out.println("Event under a month and one week away");
                    BuyTicketsFive.setEnabled(true); //set button to enables so that user can buy tickets
                }
            }           
            
        } catch (Exception e) {
            System.out.println("Error with row five date: " + e);
        }
    }
        
        // </editor-fold>
    
    public void dateOrder() {
        try {
            
            
            String[] stringDateList = new String[5];

            stringDateList[0] = DateOne.getText();
            stringDateList[1] = DateTwo.getText();
            stringDateList[2] = DateThree.getText();
            stringDateList[3] = DateFour.getText();
            stringDateList[4] = DateFive.getText();

            Date[] dateList = new Date[stringDateList.length];

            //turn string date into a date format to be sorted
            for (int i = 0; i < stringDateList.length; i++) {
                String date = stringDateList[i];
                Date formatDate = new SimpleDateFormat("dd/MM/yyyy").parse(date); //convert string date into Date date              
                dateList[i] = formatDate; //add formatted date into Date list                
            }


            System.out.println(" ");

            //sort dates into date order
            sortsAndSearches.dateBubbleSort(dateList);

            //turn converted dates back into strings
            DateFormat newFormat = new SimpleDateFormat("dd/MM/yyyy");
            for (int i = 0; i < dateList.length; i++) {
                Date sortedDate = dateList[i];
                String reformattedDate = newFormat.format(sortedDate);
                stringDateList[i] = reformattedDate;
            }


            ArrayList<event> eventList = databaseSQL.getEvents();
            System.out.println("Events before sort:");
            for (int i = 0; i < eventList.size(); i++) {
                System.out.println(eventList.get(i));
            }
            System.out.println("");
            
            ArrayList<event> eventsSoonest = new ArrayList<>();

            //searches through eventsList until dates match, then adds matching event into eventsSoonest arraylist
            for (int i = 0; i < stringDateList.length; i++) {
                for (int j = 0; j < stringDateList.length; j++) {

                    //comparing dates to see if they match
                    String eventDate = eventList.get(j).getEventDate();
                    if (stringDateList[i].equals(eventDate)) {
                        eventsSoonest.add(eventList.get(j));
                    }

                }
            }
            
            System.out.println("Events after bubble sort:");
            for (int i = 0; i < eventsSoonest.size(); i++) {
                System.out.println(eventsSoonest.get(i));
            }
            

            NameOne.setText(eventsSoonest.get(0).getEventName());
            String ticketCap1 = Integer.toString(eventsSoonest.get(0).getRemainingTickets());
            TicketNumberOne.setText(ticketCap1);
            DateOne.setText(eventsSoonest.get(0).getEventDate());
            TimeOne.setText(eventsSoonest.get(0).getEventTime());

            NameTwo.setText(eventsSoonest.get(1).getEventName());
            String ticketCap2 = Integer.toString(eventsSoonest.get(1).getRemainingTickets());
            TicketNumberTwo.setText(ticketCap2);
            DateTwo.setText(eventsSoonest.get(1).getEventDate());
            TimeTwo.setText(eventsSoonest.get(1).getEventTime());

            NameThree.setText(eventsSoonest.get(2).getEventName());
            String ticketCap3 = Integer.toString(eventsSoonest.get(2).getRemainingTickets());
            TicketNumberThree.setText(ticketCap3);
            DateThree.setText(eventsSoonest.get(2).getEventDate());
            TimeThree.setText(eventsSoonest.get(2).getEventTime());

            NameFour.setText(eventsSoonest.get(3).getEventName());
            String ticketCap4 = Integer.toString(eventsSoonest.get(3).getRemainingTickets());
            TicketNumberFour.setText(ticketCap4);
            DateFour.setText(eventsSoonest.get(3).getEventDate());
            TimeFour.setText(eventsSoonest.get(3).getEventTime());

            NameFive.setText(eventsSoonest.get(4).getEventName());
            String ticketCap5 = Integer.toString(eventsSoonest.get(4).getRemainingTickets());
            TicketNumberFive.setText(ticketCap5);
            DateFive.setText(eventsSoonest.get(4).getEventDate());
            TimeFive.setText(eventsSoonest.get(4).getEventTime());
            
            buyButtonController();

        } catch (Exception e) {
            System.out.println("Error in sorting dates into chronological order: " + e);
        }

    }
    
    public  void reverseDateOrder() {
        try {
            String[] stringDateList = new String[5];

            stringDateList[0] = DateOne.getText();
            stringDateList[1] = DateTwo.getText();
            stringDateList[2] = DateThree.getText();
            stringDateList[3] = DateFour.getText();
            stringDateList[4] = DateFive.getText();

            Date[] dateList = new Date[stringDateList.length];

            //turn string date into a date format to be sorted
            for (int i = 0; i < stringDateList.length; i++) {
                String date = stringDateList[i];
                Date formatDate = new SimpleDateFormat("dd/MM/yyyy").parse(date); //convert string date into Date date              
                dateList[i] = formatDate; //add formatted date into Date list                
            }


            System.out.println(" ");

            //sort dates into date order
            sortsAndSearches.dateBubbleSort(dateList);
            
            //use stack to reverse the date order (furthest first, soonest last)
            sortsAndSearches.dateReverseArray(dateList);


            //turn converted dates back into strings
            DateFormat newFormat = new SimpleDateFormat("dd/MM/yyyy");
            for (int i = 0; i < dateList.length; i++) {
                Date a = dateList[i];
                String reformattedDate = newFormat.format(a);
                stringDateList[i] = reformattedDate;
            }

            ArrayList<event> eventList = databaseSQL.getEvents();
            System.out.println("Events before sort:");
            for (int i = 0; i < eventList.size(); i++) {
                System.out.println(eventList.get(i));
            }
            System.out.println("");
            
            ArrayList<event> eventsFurthest = new ArrayList<>();

            //searches through eventsList until dates match, then adds matching event into eventsFurthest arraylist
            for (int i = 0; i < stringDateList.length; i++) {
                for (int j = 0; j < stringDateList.length; j++) {

                    //comparing dates to see if they match
                    String eventDate = eventList.get(j).getEventDate();
                    if (stringDateList[i].equals(eventDate)) {
                        eventsFurthest.add(eventList.get(j));
                    }

                }
            } 
            
            System.out.println("Events after bubble sort:");
            for (int i = 0; i < eventsFurthest.size(); i++) {
                System.out.println(eventsFurthest.get(i));
            }

            NameOne.setText(eventsFurthest.get(0).getEventName());
            String ticketCap1 = Integer.toString(eventsFurthest.get(0).getRemainingTickets());
            TicketNumberOne.setText(ticketCap1);
            DateOne.setText(eventsFurthest.get(0).getEventDate());
            TimeOne.setText(eventsFurthest.get(0).getEventTime());

            NameTwo.setText(eventsFurthest.get(1).getEventName());
            String ticketCap2 = Integer.toString(eventsFurthest.get(1).getRemainingTickets());
            TicketNumberTwo.setText(ticketCap2);
            DateTwo.setText(eventsFurthest.get(1).getEventDate());
            TimeTwo.setText(eventsFurthest.get(1).getEventTime());

            NameThree.setText(eventsFurthest.get(2).getEventName());
            String ticketCap3 = Integer.toString(eventsFurthest.get(2).getRemainingTickets());
            TicketNumberThree.setText(ticketCap3);
            DateThree.setText(eventsFurthest.get(2).getEventDate());
            TimeThree.setText(eventsFurthest.get(2).getEventTime());

            NameFour.setText(eventsFurthest.get(3).getEventName());
            String ticketCap4 = Integer.toString(eventsFurthest.get(3).getRemainingTickets());
            TicketNumberFour.setText(ticketCap4);
            DateFour.setText(eventsFurthest.get(3).getEventDate());
            TimeFour.setText(eventsFurthest.get(3).getEventTime());

            NameFive.setText(eventsFurthest.get(4).getEventName());
            String ticketCap5 = Integer.toString(eventsFurthest.get(4).getRemainingTickets());
            TicketNumberFive.setText(ticketCap5);
            DateFive.setText(eventsFurthest.get(4).getEventDate());
            TimeFive.setText(eventsFurthest.get(4).getEventTime());
            
            buyButtonController();

        } catch (Exception e) {
            System.out.println("Error in sorting dates into chronological order: " + e);
        }
    }
    
    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        //takes selected filter from drop down and reorders events accrodingly
                
        String sortChoice = SortDropDown.getSelectedItem().toString();
        
        if (sortChoice.equals("A - Z")) {
            sortAZ();
        } else if (sortChoice.equals("Z - A")) {
            sortZA();
        } else if (sortChoice.equals("Soonest")) {
            dateOrder();
        } else if (sortChoice.equals("Furthest")) {
            reverseDateOrder();
        } else {
            System.out.println("Error when sorting events.");
        }
        
        
        
    }//GEN-LAST:event_ApplyButtonActionPerformed

    public static event chosenEvent;
    
    public static event getChosenEvent() {
        return chosenEvent;
    }
    
    private void MoreInformationOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreInformationOneActionPerformed
        //get name from button row
        //match name to object from event array list
        //send event object to more information (and buy tickets) for use in other classes
        
        //gets all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();
        
        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameOne.getText())) {
                //create new object of the selected event to be sent to MoreEventInformation class
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed from more information gui

                //opens more information window
                MoreEventInformation mei = new MoreEventInformation();
                mei.setVisible(true);                
                this.dispose();

            }            
        }              
    }//GEN-LAST:event_MoreInformationOneActionPerformed

    private void MoreInformationTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreInformationTwoActionPerformed
        //get name from button row
        //match name to object from event array list
        //send event object to more information (and buy tickets) for use in other classes

        //gets all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameTwo.getText())) {
                //create new object of the selected event to be sent to MoreEventInformation class
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed from more information gui

                //opens more information window
                MoreEventInformation mei = new MoreEventInformation();
                mei.setVisible(true);
                this.dispose();

            }
        }
    }//GEN-LAST:event_MoreInformationTwoActionPerformed

    private void MoreInformationThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreInformationThreeActionPerformed
        //gets all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameThree.getText())) {
                //create new object of the selected event to be sent to MoreEventInformation class
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed from more information gui

                //opens more information window
                MoreEventInformation mei = new MoreEventInformation();
                mei.setVisible(true);
                this.dispose();

            }
        }
    }//GEN-LAST:event_MoreInformationThreeActionPerformed

    private void MoreInformationFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreInformationFourActionPerformed
        //gets all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameFour.getText())) {
                //create new object of the selected event to be sent to MoreEventInformation class
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed from more information gui

                //opens more information window
                MoreEventInformation mei = new MoreEventInformation();
                mei.setVisible(true);
                this.dispose();

            }
        }
    }//GEN-LAST:event_MoreInformationFourActionPerformed

    private void MoreInformationFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreInformationFiveActionPerformed
        //gets all events from database and put them into an arraylist
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameFive.getText())) {
                //create new object of the selected event to be sent to MoreEventInformation class
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
//                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed from more information gui

                //opens more information window
                MoreEventInformation mei = new MoreEventInformation();
                mei.setVisible(true);
                this.dispose();

            }
        }
    }//GEN-LAST:event_MoreInformationFiveActionPerformed

    private void BuyTicketsOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyTicketsOneActionPerformed
        //set global variable so that the chosen event can be referenced from the ticket booking classes
        //getting events list from database
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameOne.getText())) {
                //create new object of the selected event to used by the ticket classes
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed by the ticket classes

                //opens stand selector window
                BuyTickets bt = new BuyTickets();
                bt.setSize(1200, 820);
                bt.setVisible(true);
                this.dispose();

            }
        }


    }//GEN-LAST:event_BuyTicketsOneActionPerformed

    private void BuyTicketsTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyTicketsTwoActionPerformed
        //set global variable so that the chosen event can be referenced from the ticket booking classes
        //getting events list from database
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameTwo.getText())) {
                //create new object of the selected event to used by the ticket classes
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed by the ticket classes

                //opens stand selector window
                BuyTickets bt = new BuyTickets();
                bt.setSize(1200, 820);
                bt.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_BuyTicketsTwoActionPerformed

    private void BuyTicketsThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyTicketsThreeActionPerformed
        
        //set global variable so that the chosen event can be referenced from the ticket booking classes
        //getting events list from database
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameThree.getText())) {
                //create new object of the selected event to used by the ticket classes
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed by the ticket classes

                //opens stand selector window
                BuyTickets bt = new BuyTickets();
                bt.setSize(1200, 820);
                bt.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_BuyTicketsThreeActionPerformed

    private void BuyTicketsFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyTicketsFourActionPerformed
        
        //set global variable so that the chosen event can be referenced from the ticket booking classes
        //getting events list from database
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameFour.getText())) {
                //create new object of the selected event to used by the ticket classes
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed by the ticket classes

                //opens stand selector window
                BuyTickets bt = new BuyTickets();
                bt.setSize(1200, 820);
                bt.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_BuyTicketsFourActionPerformed

    private void BuyTicketsFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyTicketsFiveActionPerformed
        
        //set global variable so that the chosen event can be referenced from the ticket booking classes
        //getting events list from database
        ArrayList<event> eventsList = databaseSQL.getEvents();

        for (int i = 0; i < eventsList.size(); i++) {
            //search through events list to find the object that matches the name of the event in the same row
            if (eventsList.get(i).getEventName().equals(NameFive.getText())) {
                //create new object of the selected event to used by the ticket classes
                event currentEvent = new event(eventsList.get(i).getEventID(), eventsList.get(i).getEventName(), eventsList.get(i).getEventTime(), eventsList.get(i).getEventDate(), eventsList.get(i).getEventCapacity(), eventsList.get(i).getEventDiscription(), eventsList.get(i).getRemainingTickets(), eventsList.get(i).getEventType(), eventsList.get(i).getEventBand());
                System.out.println(currentEvent);
                chosenEvent = currentEvent; //sets global variable to selected event so that object can be accessed by the ticket classes

                //opens stand selector window
                BuyTickets bt = new BuyTickets();
                bt.setSize(1200, 820);
                bt.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_BuyTicketsFiveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpcomingEvents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton BuyTicketsFive;
    private javax.swing.JButton BuyTicketsFour;
    private javax.swing.JButton BuyTicketsOne;
    private javax.swing.JButton BuyTicketsThree;
    private javax.swing.JButton BuyTicketsTwo;
    private javax.swing.JLabel DateFive;
    private javax.swing.JLabel DateFour;
    private javax.swing.JLabel DateOne;
    private javax.swing.JLabel DateThree;
    private javax.swing.JLabel DateTwo;
    private javax.swing.JButton MoreInformationFive;
    private javax.swing.JButton MoreInformationFour;
    private javax.swing.JButton MoreInformationOne;
    private javax.swing.JButton MoreInformationThree;
    private javax.swing.JButton MoreInformationTwo;
    private javax.swing.JLabel NameFive;
    private javax.swing.JLabel NameFour;
    private javax.swing.JLabel NameOne;
    private javax.swing.JLabel NameThree;
    private javax.swing.JLabel NameTwo;
    private javax.swing.JComboBox<String> SortDropDown;
    private javax.swing.JLabel TicketNumberFive;
    private javax.swing.JLabel TicketNumberFour;
    private javax.swing.JLabel TicketNumberOne;
    private javax.swing.JLabel TicketNumberThree;
    private javax.swing.JLabel TicketNumberTwo;
    private javax.swing.JLabel TimeFive;
    private javax.swing.JLabel TimeFour;
    private javax.swing.JLabel TimeOne;
    private javax.swing.JLabel TimeThree;
    private javax.swing.JLabel TimeTwo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
