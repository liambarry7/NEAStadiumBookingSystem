/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stadiumbookingsystem;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import library.databaseSQL;
import objects.payment;
import objects.ticket;

/**
 *
 * @author kimia
 */
public class PayMenu extends javax.swing.JFrame {

    /**
     * Creates new form PayMenu
     */
    public PayMenu() {
        initComponents();
        
        fillTicketsList();
        fillPaymentTicketTable();
        setTotalPrice(0);
        setPaymentDropDown();
        
        int sc = databaseSQL.getCurrentUser().getStadiumCredit();
        StadiumCredit.setText(Integer.toString(sc));
        creditCounter = sc;
        CheckConfirmText.setVisible(false);
        
        AddPaymentLabel.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TicketTable = new javax.swing.JTable();
        CancelButton = new javax.swing.JButton();
        PaymentSelecter = new javax.swing.JComboBox<>();
        ConfirmCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TotalPrice = new javax.swing.JLabel();
        ConfirmButton = new javax.swing.JButton();
        StadiumCreditCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        StadiumCredit = new javax.swing.JLabel();
        CheckConfirmText = new javax.swing.JLabel();
        AddPaymentLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("PAY");

        TicketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event", "Stand", "Seat", "Age", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TicketTable);
        if (TicketTable.getColumnModel().getColumnCount() > 0) {
            TicketTable.getColumnModel().getColumn(1).setResizable(false);
            TicketTable.getColumnModel().getColumn(2).setResizable(false);
            TicketTable.getColumnModel().getColumn(3).setResizable(false);
            TicketTable.getColumnModel().getColumn(4).setResizable(false);
        }

        CancelButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        PaymentSelecter.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        PaymentSelecter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        PaymentSelecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentSelecterActionPerformed(evt);
            }
        });

        ConfirmCheckBox.setText("Click to confirm payment choices");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Choose your payment method:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Total: Â£");

        TotalPrice.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TotalPrice.setText("000");

        ConfirmButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ConfirmButton.setText("Confirm");
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        StadiumCreditCheckBox.setText("Use Stadium Credit");
        StadiumCreditCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StadiumCreditCheckBoxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Stadium Credit: ");

        StadiumCredit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        StadiumCredit.setText("000");

        CheckConfirmText.setForeground(new java.awt.Color(255, 0, 0));
        CheckConfirmText.setText("Please confirm your payment choices before clicking the confirm button.");

        AddPaymentLabel.setForeground(new java.awt.Color(255, 0, 0));
        AddPaymentLabel.setText("Please add payment method from account menu.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(TotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(CancelButton)
                                .addComponent(ConfirmCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                                .addComponent(StadiumCreditCheckBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(StadiumCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(PaymentSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CheckConfirmText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ConfirmButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(AddPaymentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PaymentSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(StadiumCredit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(StadiumCreditCheckBox)
                .addGap(18, 18, 18)
                .addComponent(ConfirmCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TotalPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(AddPaymentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckConfirmText)
                    .addComponent(ConfirmButton))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(CancelButton)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        emptyFinalTickets();
        ChooseSeat.emptySelectedTickets();
        UpcomingEvents ue = new UpcomingEvents();
        ue.setSize(1000, 550);
        ue.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void StadiumCreditCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StadiumCreditCheckBoxActionPerformed
        //if stadium credit box is selected
        if (StadiumCreditCheckBox.isSelected()) {
            //change total price to have stadium credit taken off the price
            int sc = databaseSQL.getCurrentUser().getStadiumCredit();
            setTotalPrice(sc);
        } else if (!StadiumCreditCheckBox.isSelected()) {
            //change total price so that its full value with no money taken off
            setTotalPrice(0);
        }
    }//GEN-LAST:event_StadiumCreditCheckBoxActionPerformed

    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        System.out.println("");
        if (ConfirmCheckBox.isSelected()) {
            CheckConfirmText.setVisible(false);
            //if payment method is blank
            if (PaymentSelecter.getItemCount() == 0) {
                //display error message asking for user to add a payment method
                AddPaymentLabel.setVisible(true);
            } else {                
                AddPaymentLabel.setVisible(false);                
                //add tickets to database
                for (int i = 0; i < ticketList.size(); i++) {
                    ticket finalTicket = new ticket(ticketList.get(i).getTicketID(), ticketList.get(i).getAccountID(), ticketList.get(i).getEventId(), 
                            ticketList.get(i).getStand(), ticketList.get(i).getSeat(), ticketList.get(i).getPrice(), ticketList.get(i).getAge());

                    databaseSQL.addTicket(finalTicket);
                    //if stadium credit was used, remove from account and update account
                    if (StadiumCreditCheckBox.isSelected()) {
                        //if stadium credit is negative, make value the positive of that value
                        // if stadium credit stays positive, make it that value
                        int newStadiumCredit = creditCounter; //resets stadium credit to 0
                        int accountID = databaseSQL.getCurrentUser().getAccountID();
                        databaseSQL.updateAccountStadiumCredit(accountID, newStadiumCredit);
                        //reset current user to show changes
                        databaseSQL.resetCurrentUser(accountID);
                    }
                }
                
                //change ammount of tickets left for event
                int eventID = UpcomingEvents.getChosenEvent().getEventID();
                int seatsRemaining = UpcomingEvents.getChosenEvent().getRemainingTickets();
                int newSeatsRemaining = seatsRemaining - ticketList.size();
                
                //set new value of seatsRemaining
                databaseSQL.updateRemainingSeats(eventID, newSeatsRemaining);
                JOptionPane.showMessageDialog(null, "Thank you for purchasing your tickets. They have been added to your account to view,");
                ChooseSeat.emptySelectedTickets();
                emptyFinalTickets();

                //return to main menu
                MainMenu mm = new MainMenu(); //creates new main menu object to be opened
                mm.setVisible(true);
                this.dispose(); //closes login menu
            }

        } else if (!ConfirmCheckBox.isSelected()) {
            CheckConfirmText.setVisible(true);
        }
    }//GEN-LAST:event_ConfirmButtonActionPerformed

    private void PaymentSelecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentSelecterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentSelecterActionPerformed

    
    public static ArrayList<ticket> ticketList = new ArrayList<>();
    
    public static void fillTicketsList() {
        System.out.println("\nUser's selected tickets: ");
        for (int i = 0; i < ChooseSeat.getFinalTickets().size(); i++) {
            ticket finalTicket = new ticket(ChooseSeat.getFinalTickets().get(i).getTicketID(), ChooseSeat.getFinalTickets().get(i).getAccountID(), ChooseSeat.getFinalTickets().get(i).getEventId(), ChooseSeat.getFinalTickets().get(i).getStand(), ChooseSeat.getFinalTickets().get(i).getSeat(), ChooseSeat.getFinalTickets().get(i).getPrice(), ChooseSeat.getFinalTickets().get(i).getAge());
            ticketList.add(finalTicket);
            System.out.println(ticketList.get(i));
        }

    }
    
    public static void emptyFinalTickets() {
        ticketList.removeAll(ticketList);
    }
    
    public static int creditCounter = 0; //active stadium credit counter
    
    public void setTotalPrice(int stadiumCredit) {
        int totalPrice = 0;
        creditCounter = databaseSQL.getCurrentUser().getStadiumCredit();
        StadiumCredit.setText(Integer.toString(creditCounter)); //set stadium credit text to show what credit will be
        
        //adds up all the prices
        for (int i = 0; i < ticketList.size(); i++) {
            totalPrice = totalPrice + ticketList.get(i).getPrice();
        }
        
        if (StadiumCreditCheckBox.isSelected()) { //if user selects to use stadium credit
            int discountPrice = totalPrice - stadiumCredit;
            
            if (discountPrice > 0) {
                //price is more than 0, stadium credit all used up to take money off
                creditCounter = 0; //all of the users credit has been used up
                StadiumCredit.setText(Integer.toString(creditCounter)); //set stadium credit text to show what credit will be
                
                int newPrice = discountPrice;
                TotalPrice.setText(Integer.toString(newPrice));
                
            } else if (discountPrice < 0) {
                //stadium credit is NOT used up, total price = 0
                creditCounter = Math.abs(discountPrice); //absolute value - turns negative to positive (amount of stadium credit left)
                StadiumCredit.setText(Integer.toString(creditCounter)); //set stadium credit text to show what credit will be
                
                int newPrice = 0;
                TotalPrice.setText(Integer.toString(newPrice));
            }
                
        } else {
            TotalPrice.setText(Integer.toString(totalPrice));
        }
        
    }
    
    public void fillPaymentTicketTable() {
        DefaultTableModel tblModel = (DefaultTableModel)TicketTable.getModel();        
        
        //load tickets into the table
        for (int i = 0; i < ticketList.size(); i++) {
            //using eventID, find eventName
            String name = UpcomingEvents.getChosenEvent().getEventName();
            String stand = ticketList.get(i).getStand();
            String seat = ticketList.get(i).getSeat();
            String age = ticketList.get(i).getAge();
            String price = Integer.toString(ticketList.get(i).getPrice());
            
            String data[] = {name, stand, seat, age, price};
            
            tblModel.addRow(data);
        }
        
    }
    
    public void setPaymentDropDown() {
        //creating an arraylist of all the user's card details
        int userID = databaseSQL.getCurrentUser().getAccountID();
        ArrayList<payment> paymentList = databaseSQL.getPaymentMethods(userID);
        
        //set array of user's card numbers the size of the ammount of cards they have
        String[] paymentOptions = new String[paymentList.size()];
        
        System.out.println("\nUser's payment methods: ");
        for (int i = 0; i < paymentList.size(); i++) {
            paymentOptions[i] = paymentList.get(i).getCardNumber(); 
            System.out.println(paymentOptions[i]);
        }
                
        //set dropdown to array of card numbers
        PaymentSelecter.setModel(new javax.swing.DefaultComboBoxModel<>(paymentOptions));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddPaymentLabel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel CheckConfirmText;
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JCheckBox ConfirmCheckBox;
    private javax.swing.JComboBox<String> PaymentSelecter;
    private javax.swing.JLabel StadiumCredit;
    private javax.swing.JCheckBox StadiumCreditCheckBox;
    private javax.swing.JTable TicketTable;
    private javax.swing.JLabel TotalPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
